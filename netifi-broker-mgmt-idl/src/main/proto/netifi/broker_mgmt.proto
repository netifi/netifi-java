//
//    Copyright 2019 The Netifi Authors
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
syntax = "proto3";

package com.netifi.broker.info;

import "google/protobuf/empty.proto";
import "netifi/broker_info.proto";

option java_package = "com.netifi.broker.mgmt";
option java_outer_classname = "BrokerManagement";
option java_multiple_files = true;

message Ack {
}

message Brokers {
    repeated com.netifi.broker.info.Broker brokers = 1;
}

message Connection {
  com.netifi.broker.info.Id id = 1;
  string group = 2;
}

service BrokerManagementService {
    // Shutdowns down a broker process
    rpc shutdown (google.protobuf.Empty) returns (google.protobuf.Empty) {}

    // Shutdowns down a broker process after draining connections with timeout
    rpc shutdownGracefully (google.protobuf.Empty) returns (google.protobuf.Empty) {}

    // Broker leaves the cluster, but stays running
    rpc leave (google.protobuf.Empty) returns (Ack) {}

    // Broker drains connections and leaves the cluster, then joins cluster again
    rpc restart (google.protobuf.Empty) returns (Ack) {}

    // Broker joins cluster It previously left
    rpc rejoin (google.protobuf.Empty) returns (Ack) {}

    // Tells the Broker to join using the provided Brokers
    rpc join (Brokers) returns (Ack) {}

    // Closes connections to a specific set of destinations
    rpc closeDestination (stream com.netifi.broker.info.Destination) returns (Ack) {}

    // Closes connections to a specific set of groups
    rpc closeGroup (stream com.netifi.broker.info.Group) returns (Ack) {}

    // Closes connections to a specific set of brokers
    rpc closeBroker (stream com.netifi.broker.info.Broker) returns (Ack) {}

    // Closes all connections on the broker - except broker to broker connections
    rpc closeDestinations (google.protobuf.Empty) returns (Ack) {}

    // Closes connections to all other brokers
    rpc closeBrokers (google.protobuf.Empty) returns (Ack) {}

    // Closes all connections on the broker including broker to broker connections
    rpc closeAll (google.protobuf.Empty) returns (Ack) {}

    // Closes connection on the broker by its id. Connection group is optional
    rpc closeConnection(stream Connection) returns (Ack) {}
}
