buildscript {
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    id 'com.gradle.build-scan' version '2.0.2' // declare before any other plugin
    id 'com.google.osdetector' version '1.4.0'
    id "com.github.hierynomus.license" version '0.15.0'
    id 'com.github.sherter.google-java-format' version '0.8' apply false
    id 'me.champeau.gradle.jmh' version '0.4.7' apply false
    id 'io.morethan.jmhreport' version '0.6.2.1' apply false
    id 'io.spring.dependency-management' version '1.0.7.RELEASE' apply false
    id 'com.google.protobuf' version '0.8.8' apply false
}

//buildScan { licenseAgreementUrl = 'https://gradle.com/terms-of-service'; licenseAgree = 'yes' }
buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}


allprojects {
    dependencyLocking {
        lockAllConfigurations()
    }
}

subprojects {
    apply from: "../dependency-management.gradle"
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'com.github.sherter.google-java-format'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'license'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    project.version += project.hasProperty('versionSuffix') ? project.property('versionSuffix') : ''

    repositories {
        maven {
            url 'https://sonatype.netifiinc.com/repository/jcenter/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/maven-central/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/netifi-oss/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/netifi-artifactory-libs-release-local/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/netifi-artifactory-libs-snapshot-local/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/spring-libs-snapshot/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/jcenter-oss-snapshot/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/jcenter-oss-release/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
    }

    googleJavaFormat {
        toolVersion = '1.6'
        exclude '**/generated'
    }

    // Build Source Jars
    def sourcesJarMap = [name: 'sourcesJar', type: Jar, dependsOn: classes]
    project.tasks.create(sourcesJarMap, {
        classifier = 'sources'
        from sourceSets.main.allSource
        version = "${project.version}"
    })

    // Build Javadoc Jars
    def javadocJarMap = [name: 'javadocJar', type: Jar, dependsOn: javadoc]
    project.tasks.create(javadocJarMap, {
        classifier = 'javadoc'
        from javadoc.destinationDir
        version = "${project.version}"
    })

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
    
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = 'Netifi Java'
                    description = 'A collection of java libraries for Netifi'
                    url = 'https://www.netifi.com/'
                    organization {
                        name = 'Netifi, Inc.'
                        url = 'https://www.netifi.com'
                    }
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'Support'
                            name = 'Netifi Engineering'
                            email = 'support@netifi.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/netifi/netifi-java.git'
                        developerConnection = 'scm:git:ssh://github.com/netifi/netifi-java.git'
                        url = 'http://github.com/netifi/netifi-java/'
                    }
                    issueManagement {
                        system = "GitHub Issues"
                        url = "https://github.com/netifi/netifi-java/issues"
                    }
                }
            }
        }
        repositories {
            maven {
                url ''
                def releasesRepoUrl = 'https://sonatype.netifiinc.com/repository/netifi-maven-releases/'
                def snapshotsRepoUrl = 'https://sonatype.netifiinc.com/repository/netifi-maven-snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = "${netifiPublishUsername}"
                    password = "${netifiPublishPassword}"
                }
            }
        }
    }

    license {
        header rootProject.file('resources/HEADER')
        strictCheck true
        excludes(["**/*.xml", "**/*.json", "**/*.properties"])
    }
    license.mapping('java', 'SLASHSTAR_STYLE')

    task allDeps(type: DependencyReportTask) {}
}
